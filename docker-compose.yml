networks:
  default:
    name: prefect-network
    external: true
services:

  broker:
    image: confluentinc/cp-kafka:7.2.0
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://broker:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    profiles: ["kafka"]

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "-w", "2", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 5
    profiles: ["kafka"]  

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.2.0
    hostname: control-center
    container_name: control-center
    depends_on:
      - zookeeper
      - broker
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
    profiles: ["kafka"]  

  kafka_producer_load:
    container_name: kafka_producer_load
    env_file:
      - .env
    build:
      context: .
      dockerfile: ./docker_compose/kafka_producer_load.Dockerfile
    environment:
      PYTHONPATH: /app/${PROJECT_NAME}   
    volumes:
      - ./logs:/app/logs
      - ./src:/app/${PROJECT_NAME}/src
      - .env:/app/${PROJECT_NAME}/.env
    profiles: ["producer"]  
      
  kafka_producer_gas:
    container_name: kafka_producer_gas
    env_file:
      - .env
    build:
      context: .
      dockerfile: ./docker_compose/kafka_producer_gas.Dockerfile
    environment:
      PYTHONPATH: /app/${PROJECT_NAME}
    volumes:
      - ./logs:/app/logs
      - ./src:/app/${PROJECT_NAME}/src
      - .env:/app/${PROJECT_NAME}/.env    
    profiles: ["producer"]  

  database:
    image: postgres:latest
    restart: always
    container_name: prefect-postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgressPass  
      - POSTGRES_DB=prefect
    volumes:
      - prefectdb:/var/lib/postgresql/data  
    expose:
      - 5432
    profiles: ["server"]  

  server:
    image: prefecthq/prefect:2.20.8-python3.12
    restart: always
    volumes:
      - prefect:/root/.prefect
    entrypoint: ["/opt/prefect/entrypoint.sh", "prefect", "server", "start"]
    environment:
      - PREFECT_UI_URL=http://127.0.0.1:4200/api
      - PREFECT_API_URL=http://127.0.0.1:4200/api
      - PREFECT_SERVER_API_HOST=0.0.0.0
      - PREFECT_API_DATABASE_CONNECTION_URL=postgresql+asyncpg://postgres:postgressPass@database:5432/prefect
    ports:
      - 4200:4200
    depends_on:
      - database
    profiles: ["server"]

  
  agent:
    image: prefecthq/prefect:2.20.8-python3.12
    restart: always
    entrypoint: ["/opt/prefect/entrypoint.sh", "prefect", "agent", "start", "-q", "default"]
    environment:
      - PREFECT_API_URL=http://server:4200/api
    profiles: ["agent"]

  orchestrator:
    build:
      context: .
      dockerfile: ./docker_compose/orchestrator.Dockerfile
    container_name: prefect_orchestrator
    environment:
      - PYTHONPATH=/app/${PROJECT_NAME}
      - PREFECT_API_URL=http://server:4200/api
      - PYTHON_APP_PATH=/app/${PROJECT_NAME}/src
    volumes:
      - ./flows:/app/${PROJECT_NAME}/flows
      - ./src:/app/${PROJECT_NAME}/src
      - .env:/app/${PROJECT_NAME}/.env
      - ./deployments:/app/${PROJECT_NAME}/deployments
      
    entrypoint: ["python", "-m", "deployments.multi_flow_deployment"] 
    profiles: ["server"]

volumes:
  prefectdb:
  prefect:  